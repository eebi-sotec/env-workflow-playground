# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'not yet Terraform'

on:
  workflow_dispatch:
    inputs:
      environmentGroup:
        # accessible via inputs.environmentGroup
        description: 'Which environments?'
        type: choice
        required: true
        default: 'Test'
        options:
        - 'Test'
        - 'Prod'
        - 'All'
      tags: 
        description: 'I am aware that this will stop and rebuild existing environments.'
        required: true
        type: boolean
 #  pull_request:

permissions:
  contents: read

jobs:
  get-environments:
    runs-on: ubuntu-latest
    steps:
    - name: Get Env-names
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        SELECTED_GROUP: ${{ inputs.environment }}
      id: get_envs
      run: |
        response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/environments")
          
        if [ "$SELECTED_GROUP" == "Test"]; then
          env_names=$(echo "$response" | jq -r '.[].name | select(startswith("production_"))' | tr '\n' ',')
        elif [ "$SELECTED_GROUP" == "Prod"]; then
          env_names=$(echo "$response" | jq -r '.[].name | select(startswith("play"))' | tr '\n' ',')
        else 
          env_names=$(echo "$response" | jq -r '.[].name' | tr '\n' ',')
        fi
        
        env_names=${env_names%,}
        echo "::set-output name=env_names::$env_names"  

  print-vars:
    runs-on: ubuntu-latest
    needs: get-environments
    strategy:
      matrix:
        environment: [${{ needs.get-environments.outputs.env_names }}]
    steps:
    - name: "Print ${{ matrix.environment }} Env-vars"
      run: |
        echo "The secret for environment ${{ matrix.environment}} is: ${{secrets["SOME_SECRET"]}}

      
#  terraform:
#    name: 'Terraform'
#    runs-on: ubuntu-latest
#    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#    defaults:
#      run:
#        shell: bash

#    steps:
    # Checkout the repository to the GitHub Actions runner
#    - name: Checkout
#      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v1
#      with:
#        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init
#      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
#    - name: Terraform Format
#      run: terraform fmt -check

    # Generates an execution plan for Terraform
#    - name: Terraform Plan
#      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#      run: terraform apply -auto-approve -input=false
